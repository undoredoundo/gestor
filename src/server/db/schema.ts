// Example model schema from the Drizzle docs
// https://orm.drizzle.team/docs/sql-schema-declaration

import { ROLES } from "@/lib/constants";
import { relations } from "drizzle-orm";
import { index, integer } from "drizzle-orm/sqlite-core";
import { sqliteTableCreator } from "drizzle-orm/sqlite-core";

export const createTable = sqliteTableCreator((name) => `gestor_${name}`);

const timestamps = {
  createdAt: integer("created_at", { mode: "timestamp" })
    .$defaultFn(() => new Date())
    .notNull(),
  updatedAt: integer("updated_at", { mode: "timestamp" })
    .$defaultFn(() => new Date())
    .$onUpdateFn(() => new Date())
    .notNull(),
};

export const tools = createTable("tools", (d) => ({
  id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  name: d.text("name", { length: 256 }).notNull(),
  count: d.integer("count", { mode: "number" }).notNull(),
  type: d
    .text("type", {
      enum: ["mecha", "macho", "fresa"],
    })
    .notNull(),
  ...timestamps,
}));

export const stock = createTable(
  "stock",
  (d) => ({
    id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
    clientId: d
      .integer("client_id", { mode: "number" })
      .references(() => client.id)
      .notNull(),
    descriptionId: d
      .integer("description_id", { mode: "number" })
      .references(() => description.id),
    codeId: d.integer("code_id", { mode: "number" }).references(() => code.id),
    date: d.integer("date", { mode: "timestamp" }).notNull(),
    quantity: d.integer("quantity", { mode: "number" }).notNull(),
    status: d.text("status").notNull(),
    note: d.text("note"),
    unit: d.text("unit", { enum: ["pcs", "kg"] }),
    createdBy: d
      .text("created_by")
      .references(() => user.id)
      .notNull(),
    ...timestamps,
  }),
  (t) => [index("stock_id_idx").on(t.id)],
);

export const client = createTable("client", (d) => ({
  id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  name: d.text("name", { length: 256 }).notNull(),
  ...timestamps,
}));

export const description = createTable("description", (d) => ({
  id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  name: d.text("name", { length: 256 }).notNull(),
  clientId: d
    .integer("client_id", { mode: "number" })
    .references(() => client.id, { onDelete: "cascade" })
    .notNull(),
  ...timestamps,
}));

export const code = createTable("code", (d) => ({
  id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  name: d.text("name", { length: 256 }).notNull(),
  clientId: d
    .integer("client_id", { mode: "number" })
    .references(() => client.id, { onDelete: "cascade" })
    .notNull(),
  ...timestamps,
}));

export const bills = createTable("bill", (d) => ({
  id: d.integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  clientId: d
    .integer("client_id", { mode: "number" })
    .references(() => client.id, { onDelete: "cascade" })
    .notNull(),
  date: d.integer("date", { mode: "timestamp" }).notNull(),
  createdBy: d
    .text("created_by")
    .references(() => user.id)
    .notNull(),
  ...timestamps,
}));

/*
    -----------------------------
    Generated by @better-auth/cli
    -----------------------------
*/

export const user = createTable("user", (d) => ({
  id: d.text("id").primaryKey(),
  name: d.text("name").notNull(),
  email: d.text("email").notNull().unique(),
  emailVerified: d
    .integer("email_verified", { mode: "boolean" })
    .$defaultFn(() => false)
    .notNull(),
  image: d.text("image"),
  role: d
    .text("role", { length: 50 })
    .$type<(typeof ROLES)[keyof typeof ROLES]>()
    .default(ROLES.user)
    .notNull(),
  ...timestamps,
}));

export const session = createTable("session", (d) => ({
  id: d.text("id").primaryKey(),
  expiresAt: d.integer("expires_at", { mode: "timestamp" }).notNull(),
  token: d.text("token").notNull().unique(),
  ipAddress: d.text("ip_address"),
  userAgent: d.text("user_agent"),
  userId: d
    .text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  ...timestamps,
}));

export const account = createTable("account", (d) => ({
  id: d.text("id").primaryKey(),
  accountId: d.text("account_id").notNull(),
  providerId: d.text("provider_id").notNull(),
  userId: d
    .text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: d.text("access_token"),
  refreshToken: d.text("refresh_token"),
  idToken: d.text("id_token"),
  accessTokenExpiresAt: d.integer("access_token_expires_at", {
    mode: "timestamp",
  }),
  refreshTokenExpiresAt: d.integer("refresh_token_expires_at", {
    mode: "timestamp",
  }),
  scope: d.text("scope"),
  password: d.text("password"),
  ...timestamps,
}));

export const verification = createTable("verification", (d) => ({
  id: d.text("id").primaryKey(),
  identifier: d.text("identifier").notNull(),
  value: d.text("value").notNull(),
  expiresAt: d.integer("expires_at", { mode: "timestamp" }).notNull(),
  ...timestamps,
}));

/*
    ---------
    Relations
    ---------
*/

export const stockRelations = relations(stock, ({ one }) => ({
  author: one(user, {
    fields: [stock.createdBy],
    references: [user.id],
  }),
  client: one(client, {
    fields: [stock.clientId],
    references: [client.id],
  }),
  description: one(description, {
    fields: [stock.descriptionId],
    references: [description.id],
  }),
  code: one(code, {
    fields: [stock.codeId],
    references: [code.id],
  }),
}));

export const userRelations = relations(user, ({ many }) => ({
  stocks: many(stock),
}));

export const clientRelations = relations(client, ({ many }) => ({
  descriptions: many(description),
  codes: many(code),
  stocks: many(stock),
}));

export const descriptionRelations = relations(description, ({ one, many }) => ({
  client: one(client, {
    fields: [description.clientId],
    references: [client.id],
  }),
  stocks: many(stock),
}));

export const codeRelations = relations(code, ({ one, many }) => ({
  client: one(client, {
    fields: [code.clientId],
    references: [client.id],
  }),
  stocks: many(stock),
}));
